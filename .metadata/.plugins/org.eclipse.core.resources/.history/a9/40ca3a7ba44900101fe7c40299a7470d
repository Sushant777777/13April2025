package com.google.graph.last.revision.part.two;

import java.util.ArrayList;
import java.util.PriorityQueue;

public class PrimsAlgo {
	static class Edge {
		int src;
		int det;
		int wt;

		public Edge(int src, int det, int wt) {
			super();
			this.src = src;
			this.det = det;
			this.wt = wt;
		}

	}

	static class Pair implements Comparable<Pair> {
		int node;
		int dist;

		public Pair(int node, int dist) {
			super();
			this.node = node;
			this.dist = dist;
		}

		@Override
		public int compareTo(Pair o) {
			// TODO Auto-generated method stub
			return this.dist - o.dist;
		}

	}

	public static void createGraph(ArrayList<Edge> graph[]) {

		for (int i = 0; i < graph.length; i++) {
			graph[i] = new ArrayList<Edge>();
		}

		graph[0].add(new Edge(0, 1, 10));
		graph[0].add(new Edge(0, 2, 15));
		graph[0].add(new Edge(0, 3, 30));

		graph[1].add(new Edge(1, 0, 10));
		graph[1].add(new Edge(1, 3, 40));

		graph[2].add(new Edge(2, 0, 15));
		graph[2].add(new Edge(2, 3, 50));

		graph[3].add(new Edge(3, 1, 40));
		graph[3].add(new Edge(3, 2, 50));

	}

	public static void primsAlgo(ArrayList<Edge> graph[], int src, int v) {
		PriorityQueue<Pair> pairs = new PriorityQueue<PrimsAlgo.Pair>();

		int visited[] = new int[v];

		pairs.add(new Pair(0, 0));
	}

	public static void main(String[] args) {
		int V = 4;
		ArrayList<Edge> graph[] = new ArrayList[V];

		createGraph(graph);
	}
}
